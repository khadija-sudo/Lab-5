#include <iostream>
using namespace std;

bool isSafe(int board[10][10], int row, int col, int N) {
    for (int i = 0; i < row; i++)
        if (board[i][col] == 1) return false;

    for (int i = row-1, j = col-1; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 1) return false;

    for (int i = row-1, j = col+1; i >= 0 && j < N; i--, j++)
        if (board[i][j] == 1) return false;

    return true;
}

bool solveNQueens(int board[10][10], int row, int N) {
    if (row >= N) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                cout << board[i][j] << " ";
            cout << endl;
        }
        cout << endl;
        return true; // Print all solutions
    }

    bool res = false;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, row, i, N)) {
            board[row][i] = 1;
            res = solveNQueens(board, row + 1, N) || res;
            board[row][i] = 0; // Backtrack
        }
    }
    return res;
}

int main() {
    int N;
    cout << "Enter the number of queens: ";
    cin >> N;

    int board[10][10] = {0};
    cout << "All possible solutions:\n";
    solveNQueens(board, 0, N);

    return 0;
}
